<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Edit Product</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Cropper.js CSS -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet" />
  <!-- Cropper.js JS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
</head>
<body class="bg-gray-100 py-10">

  <div class="max-w-3xl mx-auto bg-white shadow-md rounded-xl p-8">
    <h2 class="text-2xl font-bold mb-6 text-center">Edit Product</h2>

    <form id="editProductForm" class="space-y-6">
      <!-- Product Name -->
      <div>
        <label class="block mb-1 font-medium">Product Name</label>
        <input 
          type="text" 
          name="productName" 
          value="<%= product.productName %>" 
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
          required
        >
      </div>

      <!-- Price -->
      <div>
        <label class="block mb-1 font-medium">Price ($)</label>
        <input 
          type="number" 
          name="price" 
          step="0.01" 
          value="<%= product.price %>" 
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
          required
        >
      </div>

      <!-- Stock -->
      <div>
        <label class="block mb-1 font-medium">Stock</label>
        <input 
          type="number" 
          name="stock" 
          value="<%= product.stock %>" 
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
          required
        >
      </div>

      <!-- Category -->
      <div>
        <label class="block mb-1 font-medium">Category</label>
        <select 
          name="categoriesId" 
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
          required
        >
          <% categories.forEach(cat => { %>
            <option value="<%= cat._id %>" 
              <%= (cat._id.toString() === product.categoriesId?.toString()) ? 'selected' : '' %>>
              <%= cat.name %>
            </option>
          <% }) %>
        </select>
      </div>

      <!-- Color -->
      <div>
        <label class="block mb-1 font-medium">Color</label>
        <input 
          type="text" 
          name="color" 
          value="<%= product.color %>" 
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
          required
        >
      </div>

      <!-- Description -->
      <div>
        <label class="block mb-1 font-medium">Description</label>
        <textarea 
          name="description" 
          rows="4" 
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" 
          required
        ><%= product.description %></textarea>
      </div>

      <!-- Image Uploads -->
      <div>
        <label class="block mb-1 font-medium">Product Images</label>
        <div class="space-y-2">
          <% for (let i = 0; i < 3; i++) { %>
            <div class="flex items-center gap-4">
              <input type="file" name="images" accept="image/*" class="w-full">
              <% if (product.imageUrl && product.imageUrl[i]) { %>
                <img src="<%= product.imageUrl[i] %>" alt="Image <%= i+1 %>" class="w-16 h-16 object-cover rounded border">
              <% } %>
            </div>
          <% } %>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex justify-end space-x-4 mt-4">
        <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
          Update Product
        </button>
      </div>
    </form>
  </div>

  <!-- Modal for Image Cropping -->
  <div id="crop-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg w-96">
      <h3 class="text-lg font-semibold mb-4">Crop Image</h3>
      <div class="w-full h-64 mb-4">
        <img id="crop-image" class="max-h-full mx-auto">
      </div>
      <div class="flex justify-end space-x-4">
        <button id="cancel-crop" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">Cancel</button>
        <button id="confirm-crop" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Crop</button>
      </div>
    </div>
  </div>

  <script>
    const form = document.getElementById('editProductForm');
    let selectedFiles = [];

    // Handle file selection
    document.querySelectorAll('input[type="file"]').forEach(input => {
      input.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
            const base64 = e.target.result;
            // Store the base64 image
            if (!selectedFiles[this.dataset.index]) {
              selectedFiles[this.dataset.index] = base64;
            }
          };
          reader.readAsDataURL(file);
        }
      });
    });

    // Handle form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = {
        productName: form.querySelector('[name="productName"]').value,
        categoriesId: form.querySelector('[name="categoriesId"]').value,
        color: form.querySelector('[name="color"]').value,
        description: form.querySelector('[name="description"]').value,
        price: form.querySelector('[name="price"]').value,
        stock: form.querySelector('[name="stock"]').value,
        croppedImages: selectedFiles.filter(Boolean) // Filter out any undefined values
      };

      try {
        const response = await fetch('/admin/edit-product/<%= product._id %>?_method=PUT', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: data.message || 'Product updated successfully!',
          }).then(() => {
            window.location.href = '/admin/products';
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: data.message || 'Something went wrong!',
          });
        }
      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Unexpected error occurred.',
        });
      }
    });

    const cropModal = document.getElementById('crop-modal');
    const cropImage = document.getElementById('crop-image');
    const cancelCrop = document.getElementById('cancel-crop');
    const confirmCrop = document.getElementById('confirm-crop');
    let cropper;
    let currentIndex;

    imageInputs.forEach(input => {
      input.addEventListener('change', function () {
        const index = this.dataset.index;
        const file = this.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = function (e) {
            cropImage.src = e.target.result;
            cropModal.classList.remove('hidden');
            currentIndex = index;
            if (cropper) {
              cropper.destroy();
            }
            cropper = new Cropper(cropImage, {
              aspectRatio: 1,
              viewMode: 1,
            });
          };
          reader.readAsDataURL(file);
        }
      });
    });

    cancelCrop.addEventListener('click', () => {
      cropModal.classList.add('hidden');
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    });

    confirmCrop.addEventListener('click', () => {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas({
          width: 300,
          height: 300,
        });
        const croppedData = canvas.toDataURL('image/png');
        document.getElementById(`cropped-${currentIndex}`).value = croppedData;
        const previewImg = document.getElementById(`preview-${currentIndex}`);
        previewImg.src = croppedData;
        previewImg.classList.remove('hidden');
        cropModal.classList.add('hidden');
        cropper.destroy();
        cropper = null;
      }
    });
  </script>

</body>
</html>
