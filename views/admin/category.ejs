<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management | Admin</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-100">
    <aside class="fixed top-0 left-0 w-64 h-full bg-zinc-900 p-5 shadow-lg">
        <div class="flex items-center justify-center mb-8">
            <h1 class="text-white font-bold text-2xl">ELITECART</h1>
        </div>
        <nav class="space-y-4">
            <a href="/admin/dashboard" class="block text-gray-400 hover:text-white px-4 py-2 rounded-lg transition">Dashboard</a>
            <a href="/admin/categories" class="block text-white bg-zinc-800 px-4 py-2 rounded-lg">Categories</a>
        </nav>
    </aside>
    
    <div class="ml-64 p-8">
        <div class="bg-white p-6 rounded-lg shadow-md">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold text-gray-700">Category Management</h2>
                <button onclick="openModal()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Add Category</button>
            </div>
            
            <input type="text" id="searchCategory" placeholder="Search categories..." class="w-1/3 px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 mb-4">
            
            <div class="overflow-x-auto">
                <table class="w-full border-collapse border border-gray-300 bg-white shadow-sm">
                    <thead class="bg-gray-200">
                        <tr>
                            <th class="border px-4 py-2">#</th>
                            <th class="border px-4 py-2">Category Name</th>
                            <th class="border px-4 py-2">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% categories.forEach((category, index) => { %>
                            <tr>
                                <td class="border px-4 py-2"><%= index + 1 %></td>
                                <td class="border px-4 py-2"><%= category.name %></td>
                                <td class="border px-4 py-2 flex space-x-2">
                                    <button onclick="editCategory('<%= category._id %>')" class="px-3 py-1 bg-yellow-500 text-white rounded-md hover:bg-yellow-600">Edit</button>
                                    <button onclick="hideCategory('<%= category._id %>')" class="px-3 py-1 bg-gray-500 text-white rounded-md hover:bg-gray-600">Hide</button>
                                </td>
                            </tr> 
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div id="categoryModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden">
        <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
            <h2 class="text-xl font-bold text-gray-700 mb-4">Add New Category</h2>
            
            <label class="block text-gray-600 mb-2">Category Name</label>
            <input type="text" id="categoryName" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 mb-4" placeholder="Enter category name">

            <div class="flex justify-end space-x-2">
                <button onclick="closeModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
                <button onclick="saveCategory()" class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">Save</button>
            </div>
        </div>
    </div>


    <!-- Edit Modal -->
<div id="editCategoryModal" class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
        <h2 class="text-xl font-bold text-gray-700 mb-4">Edit Category</h2>

        <label class="block text-gray-600 mb-2">Category Name</label>
        <input type="text" id="editCategoryName" class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 mb-4" placeholder="Enter new category name">

        <input type="hidden" id="editCategoryId">

        <div class="flex justify-end space-x-2">
            <button onclick="closeEditModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">Cancel</button>
            <button onclick="updateCategory()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">Update</button>
        </div>
    </div>
</div>


    <script>
        function openModal() {
            document.getElementById("categoryModal").classList.remove("hidden");
            document.getElementById("categoryName").value = "";
        }

        function closeModal() {
            document.getElementById("categoryModal").classList.add("hidden");
        }

        function saveCategory() {
            const nameInput = document.getElementById("categoryName");
            if (!nameInput) return Swal.fire("Error", "Category name input not found.", "error");

            const name = nameInput.value.trim();
            if (!name) return Swal.fire("Warning", "Category name cannot be empty!", "warning");
            if (!/^[A-Za-z]+$/.test(name)) return Swal.fire("Warning", "Category name can only contain alphabets.", "warning");
            if (name.length > 10) return Swal.fire("Warning", "Category name must not exceed 10 characters.", "warning");

            const formattedName = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();

            fetch("/admin/add-category", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ categoryName: formattedName, isActive: true })
            })
            .then(response => response.json().catch(() => null))
            .then(data => {
                if (!data || !data.success) throw new Error(data?.message || "Unexpected error occurred");
                Swal.fire("Success", "Category added successfully!", "success").then(() => {
                    closeModal();
                    window.location.reload();
                });
            })
            .catch(error => Swal.fire("Error", "Failed to add category: " + error.message, "error"));
        }

        function hideCategory(categoryId) {
            fetch(`/admin/hide-category/${categoryId}`, { method: "PATCH" })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire("Success", "Category hidden successfully!", "success").then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire("Error", "Failed to hide category", "error");
                }
            })
            .catch(() => Swal.fire("Error", "Error hiding category", "error"));
        }


//////////////////////////////////////////////////////////////////////////////////////////////

function editCategory(id) {
    fetch(`/admin/category/${id}`)  // Make sure this route returns JSON
        .then(res => res.json())
        .then(data => {
            if (data.success && data.category) {
                document.getElementById("editCategoryId").value = data.category._id;
                document.getElementById("editCategoryName").value = data.category.name;
                document.getElementById("editCategoryModal").classList.remove("hidden");
            } else {
                Swal.fire("Error", data.message || "Failed to load category", "error");
            }
        })
        .catch(err => {
            console.error("Error:", err);
            Swal.fire("Error", "Something went wrong", "error");
        });
}

function closeEditModal() {
    document.getElementById("editCategoryModal").classList.add("hidden");
}

function updateCategory() {
    const id = document.getElementById("editCategoryId").value;
    const name = document.getElementById("editCategoryName").value.trim();

    if (!name) return Swal.fire("Warning", "Category name cannot be empty!", "warning");
    if (!/^[A-Za-z]+$/.test(name)) return Swal.fire("Warning", "Only alphabets allowed", "warning");
    if (name.length > 10) return Swal.fire("Warning", "Max 10 characters allowed", "warning");

    const formattedName = name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();

    fetch(`/admin/edit-category/${id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ categoryName: formattedName })
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            Swal.fire("Success", "Category updated!", "success").then(() => {
                closeEditModal();
                window.location.reload();
            });
        } else {
            Swal.fire("Error", data.message || "Failed to update", "error");
        }
    })
    .catch(err => {
        console.error("Update error:", err);
        Swal.fire("Error", "Something went wrong", "error");
    });
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////




function hideCategory(categoryId) {
    Swal.fire({
        title: "Are you sure?",
        text: "This category will be hidden.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, hide it!"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/hide-category/${categoryId}`, { method: "PATCH" })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire("Hidden!", "Category has been hidden.", "success").then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire("Error", "Failed to hide category", "error");
                    }
                })
                .catch(() => Swal.fire("Error", "Error hiding category", "error"));
        }
    });
}





    </script>
</body>
</html>
